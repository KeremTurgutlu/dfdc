# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/20_datasets.ipynb (unless otherwise specified).

__all__ = ['sort_dict', 'flatten_df', 'convert_cropped_files_todf', 'create_frame_label_df']

# Cell
from ..core.core import read_metadata
from fastai.vision import *

# Cell
def sort_dict(d): return {k: v for k, v in sorted(d.items(), key=lambda item: item[1])}

# Cell
def flatten_df(df):
    res = []
    for _, row in df.iterrows():
        video_fname = row['video_fname']
        frame_fnames = row['frame_fnames']
        label = row['label']
        for frame_fname in frame_fnames:
            res.append({'video_fname': video_fname, 'frame_fname': frame_fname, 'label':label})
    return pd.DataFrame(res)

# Cell
def convert_cropped_files_todf(cropped_files:List[PathOrStr]):
    "sort all frames by no and create dataframe for given videos"
    d = defaultdict(dict)
    for o in cropped_files:
        fname = o.parent.name
        frame_fname = str(o)
        frame_no = int(o.name.split("_")[1])
        d[fname][frame_fname] = frame_no

    res = []
    for video_fname, crop_fnames in d.items():
        frame_fnames = list(sort_dict(d[video_fname]).keys())
        res.append({"video_fname":video_fname, "frame_fnames":frame_fnames})
    return pd.DataFrame(res)


def create_frame_label_df(data_path, video_path, part_no):
    cropped_path = data_path/f'dfdc_cropped_faces/dfdc_train_part_{part_no}'
    cropped_files = get_files(cropped_path, extensions=['.jpg'], recurse=True)
    df = convert_cropped_files_todf(cropped_files)
    metadf = read_metadata(video_path/f'dfdc_train_part_{part_no}/metadata.json')
    metadf['video_fname'] = metadf.fname.apply(lambda o: Path(o).stem)
    metadf['label'] = metadf['label'].map({"REAL":0, "FAKE":1})
    merged_df = df.merge(metadf[['video_fname', 'label']], on="video_fname", how="left")
    assert not sum(merged_df.isna().any())
    return merged_df