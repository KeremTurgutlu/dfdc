# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/21_single_frame_model.ipynb (unless otherwise specified).

__all__ = ['SingleFrameDataset', 'SingleFrameSampler']

# Cell
from .dataset_utils import *
from fastai.vision import *

# Cell
class SingleFrameDataset(Dataset):
    def __init__(self, flat_df):
        self.flat_df = flat_df

    def __getitem__(self, i):
        d1 = dict(self.flat_df.iloc[i])
        img = open_image(d1['frame_fname']).resize(299).data
        img = normalize(img, *xception_stats)
        label = d1['label']
        return img, label

    def __len__(self):
        return len(self.flat_df)

# Cell
class SingleFrameSampler(Sampler):
    def __init__(self, df, flat_df):
        self.df, self.flat_df = df, flat_df

    def __iter__(self):
        # sample FAKE and REAL videos equally for each class
        class_counts = Counter(self.df['label'])
        minority_num_samples = class_counts[0]
        minority_fnames = self.df[self.df['label'] == 0]['video_fname'].values
        majority_fnames = self.df[self.df['label'] == 1].sample(minority_num_samples)['video_fname'].values
        minority_fnames, majority_fnames
        sampled_fnames = np.concatenate([minority_fnames, majority_fnames])
        sampled_df = self.df[self.df['video_fname'].isin(sampled_fnames)]

        # sample single frame for each sampled video
        res = []
        for _, row in sampled_df.iterrows():
            video_fname = row['video_fname']
            frame_fname = np.random.choice(row['frame_fnames'])
            res.append({'video_fname':video_fname, 'frame_fname':frame_fname})
        sampled_flat_df = pd.DataFrame(res)
        sampled_flat_df['sample_this'] = 1
        merged_flat_df = self.flat_df.merge(sampled_flat_df,on=['video_fname', 'frame_fname'],how='outer')

        # iterator for the epoch
        return iter(np.random.permutation(list(merged_flat_df[~merged_flat_df.sample_this.isna()].index)))

    def __len__(self):
        return len(self.flat_df)