# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/13_save_cropped_faces.ipynb (unless otherwise specified).

__all__ = ['save', 'save_cropped_faces']

# Cell
from fastscript import call_parse, Param
from tqdm import tqdm
from fastai.vision import *
from ..core.video_core import *
from .bbox_utils import *

# Cell
def save(self, fn:PathOrStr, mult=False):
    "Save the image to `fn`."
    x = image2np(self.data*255 if mult else self.data).astype(np.uint8)
    PIL.Image.fromarray(x).save(fn)
Image.save = save # monkey patch

def _crop_and_save(path:PathOrStr, fname:PathOrStr, crop_path:PathOrStr, bboxes:List[List[List]],
                  freq, total_frames):
    """
    path: directory which has the video with fname
    fname: filename of video "xxxxx.mp4"
    crop_path: destination directory to save cropped images for video
    bboxes: list of bbox coordinates for each sampled frame for video
    freq: sample frequence used in bbox detection
    total_frames: total number of frames sampled from video during detection
    """

    # read sampled raw video
    t, len_video = decord_cpu_video_reader(path/fname, freq)
    H,W = t.size(2), t.size(3)

    # create directory to save crops from a particular video
    video_dir = crop_path/Path(fname).stem
    os.makedirs(video_dir, exist_ok=True)

    # check if # of face detections are same as # of sampled frames
    assert len(bboxes) == t.size(0)

    rescale_param = 1.3
    for frame_no, (_frame, _bb) in enumerate(zip(t, bboxes)):
        # don't try cropping if no detection is available for the frame
        try: _bb[0]
        except: continue
        # naive: get first bbox, optionally rescale
        left, top, right, bottom  = resize_bbox_by_scale(_bb[0], rescale_param, H, W)
        # crop and save
        face_crop = Image(_frame[:, top:bottom, left:right])
        # save with frame index (start from 1) and sequence length (total available frames)
        save_path = video_dir/f"frame_{frame_no+1}_{total_frames}.jpg"
        face_crop.save(save_path)
    return crop_path

# Cell
@call_parse
def save_cropped_faces(video_directory:Param("Directory of videos", type=str),
                       face_detections_csv:Param("CSV file which has face detections", type=str)
                        ):


    # read detections
    face_detections_df = pd.read_csv(face_detections_csv)
    face_detections_df.face_detections = (face_detections_df.face_detections
                                          .apply(lambda o: json.loads(o.replace("'", '"'))))

    # create directory to save images for all videos
    video_path = Path(video_directory)
    crop_path = data_path/"dfdc_cropped_faces"/video_path.name
    os.makedirs(crop_path, exist_ok=True)

    # crop and save
    _, rows = list(zip(*face_detections_df.iterrows()))
    for row in tqdm(rows):
        fname = row['fname']
        face_detections = row['face_detections']
        bboxes = [o['detections'] for o in face_detections]
        freq = row['sample_freq']
        total_frames = row['n_frames']
        crop_path = _crop_and_save(video_path, fname, crop_path, bboxes, freq, total_frames)
    return crop_path